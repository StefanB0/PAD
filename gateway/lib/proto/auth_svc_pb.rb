# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: auth_svc.proto

require 'google/protobuf'

require 'auth_msg_pb'
require 'google/protobuf/empty_pb'


descriptor_data = "\n\x0e\x61uth_svc.proto\x1a\x0e\x61uth_msg.proto\x1a\x1bgoogle/protobuf/empty.proto2\xbc\x02\n\x0b\x41uthService\x12(\n\x05Login\x12\r.LoginRequest\x1a\x0e.LoginResponse\"\x00\x12\x31\n\x08Register\x12\x10.RegisterRequest\x1a\x11.RegisterResponse\"\x00\x12\x33\n\x0cRefreshToken\x12\x0f.RefreshRequest\x1a\x10.RefreshResponse\"\x00\x12+\n\x06\x44\x65lete\x12\x0e.DeleteRequest\x1a\x0f.DeleteResponse\"\x00\x12\x33\n\x06GetAll\x12\x16.google.protobuf.Empty\x1a\x0f.GetAllResponse\"\x00\x12\x39\n\tDeleteAll\x12\x16.google.protobuf.Empty\x1a\x12.DeleteAllResponse\"\x00\x62\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError => e
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

