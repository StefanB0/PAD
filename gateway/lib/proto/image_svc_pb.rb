# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: image_svc.proto

require 'google/protobuf'

require 'image_msg_pb'


descriptor_data = "\n\x0fimage_svc.proto\x1a\x0fimage_msg.proto2\xb4\x02\n\x0cImageService\x12\x31\n\x08GetImage\x12\x10.GetImageRequest\x1a\x11.GetImageResponse\"\x00\x12:\n\x0bUploadImage\x12\x13.UploadImageRequest\x1a\x14.UploadImageResponse\"\x00\x12:\n\x0b\x44\x65leteImage\x12\x13.DeleteImageRequest\x1a\x14.DeleteImageResponse\"\x00\x12:\n\x0bModifyImage\x12\x13.ModifyImageRequest\x1a\x14.ModifyImageResponse\"\x00\x12=\n\x0cGetImageList\x12\x14.GetImageListRequest\x1a\x15.GetImageListResponse\"\x00\x62\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError => e
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

